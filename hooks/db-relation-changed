#!/usr/bin/env python

from common import get_db_cursor, database_name, user, lastrun_path

import urllib
import subprocess
import os
import sys
import string
import random
import pickle

cursor = get_db_cursor()

def runsql(sql):
	print "[%s]" % sql
	cursor.execute(sql)

# Find existing databases
cursor.execute("show databases")
databases = [i[0] for i in cursor.fetchall()]

# Determine if we need to create a new database
if database_name not in databases:
  # Create new database
  cursor.execute(
      "create database `%s` character set utf8" % database_name)

remote_ip = subprocess.check_output(['relation-get','ip']).strip()
if len(remote_ip) < 1:
	print "Need remote IP. Exitting."
	sys.exit(0)

try:
    lastrun = open(lastrun_path, 'r')
    lastdict = pickle.load(lastrun)
    lastrun.close()
    if type(lastdict) != type(dict()):
        lastdict = dict()
except IOError:
    lastdict = dict()

# Create database user and grant access
service_password = "".join(random.sample(string.letters, 10))
slaveuser = subprocess.check_output(["relation-get","slaveuser"]).strip()

if 'slaveuser' in lastdict:
    if slaveuser == lastdict['slaveuser']:
        print "Not converting to/from slave user, already configured, exitting"
	sys.exit(0)

if slaveuser == '1':
	runsql(
	    "grant replication client on *.* to `%s`@'%s' identified by '%s'"  % (
		user,
		remote_ip,
		service_password))
	runsql(
	    "revoke all on `%s`.* from `%s`@'%s'"  % (
		database_name,   
		user,
		remote_ip))
	runsql(
	    "grant select on `%s`.* to `%s`@'%s'"  % (
		database_name,   
		user,
		remote_ip))
	subprocess.check_call(["relation-set","slaveuser=1"])
else:
	runsql(
	    "grant all on `%s`.* to `%s`@'%s' identified by '%s'" % (
		database_name,
		user,
		remote_ip,
		service_password))

lastdict['slaveuser'] = slaveuser

cursor.execute("flush privileges")

cursor.close()

hostname = urllib.urlopen(
    "http://169.254.169.254/latest/meta-data/local-hostname").read()

print "setting values"
print "host", hostname
print "database", database_name
print "user", user
print "password", service_password


print str(["relation-set",
 "database=%s" % database_name,
 "user=%s" % user,
 "password=%s" % service_password,
 'host=%s' % hostname,])

# Store new values in relation settings.
p = subprocess.Popen(
    ["relation-set",
     "database=%s" % database_name,
     "user=%s" % user,
     "password=%s" % service_password,
     'host=%s' % hostname,],
    close_fds = True)

os.waitpid(p.pid, 0)
lastrun = open(lastrun_path, 'w')
pickle.dump(lastdict, lastrun)
