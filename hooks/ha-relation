#!/usr/bin/env python

import json
import sys
import subprocess

config=json.loads(subprocess.check_output(['config-get','--format=json']))


def relation_set(**kwargs):
    cmd = [
        'relation-set'
        ]
    args = []
    for k, v in kwargs.items():
        if k == 'rid':
            cmd.append('-r')
            cmd.append(v)
        else:
            args.append('{}={}'.format(k, v))
    cmd += args
    subprocess.check_call(cmd)


def ha_relation_joined():
    # obtain the block device
    block_storage = config['block-storage']
    block_device = config['block-device']

    # Obtain the config values necessary for the cluster config. These
    # include multicast port and interface to bind to.
    corosync_bindiface = config['ha-bindiface']
    corosync_mcastport = config['ha-mcastport']

    # Obtain resources
    resources = {
            'res_ks_vip':'ocf:heartbeat:IPaddr2',
        }
    resource_params = {
            'res_ks_vip':'params ip="%s" cidr_netmask="%s" nic="%s"' % (config['vip'],
                              config['vip_cidr'], config['vip_iface']),
        }

    relation_set(block_storage=block_storage,
                 block_device=block_device,
                 corosync_bindiface=corosync_bindiface,
                 corosync_mcastport=corosync_mcastport,
                 resources=resources,
                 resource_params=resource_params)


def ha_relation_changed():
    pass


hooks = {
    "ha-relation-joined": ha_relation_joined,
    "ha-relation-changed": ha_relation_changed,
}

# keystone-hooks gets called by symlink corresponding to the requested relation
# hook.
arg0 = sys.argv[0].split("/").pop()
if arg0 not in hooks.keys():
    error_out("Unsupported hook: %s" % arg0)
hooks[arg0]()
